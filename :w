#include "data_pack.hpp"
#include "pixel_data.hpp"
#include "utils.hpp"

#include <algorithm>
#include <format>
#include <iostream>

DataPack::DataPack (const PackerConfig &config, const BitmapImage &input,
                    uint8_t entry_id)
    : config_ (config),
      filename_ (this->format_filename (input.get_filename ())), file (),
      num_entries (2), entry_id_ (entry_id), clut (input.get_color_table ()),
      pixel_data_ (input.get_pixel_array ())
{
  file.open (this->filename_, std::ios::binary);
  if (!file.is_open ())
    throw std::runtime_error (std::format (
        "ERROR: Error opening output file, {}.\n", this->filename_));

  std::cout << "Creating Data Pack.\n";
}

std::string
DataPack::format_filename (const std::string &filename) const noexcept
{
  std::string output (filename);

  if (output.length () > 8)
    output = output.substr (0, 8);

  size_t extension_loc = output.find ('.');
  if (extension_loc != std::string::npos)
    output = output.substr (0, extension_loc);

  std::transform (output.begin (), output.end (), output.begin (), ::toupper);

  output.append (".DAT");
  return output;
}

std::string
DataPack::get_filename (void) const noexcept
{
  return this->filename_;
}

void
DataPack::export_pack (void)
{
  this->export_header ();

  uint16_t prefix = this->entry_id_ & ~((1 << DataPack::FLAGS_TYPE_BIT) << 8);
  write_int16_to_file (this->file, prefix);
  this->clut.export_data (this->file);

  prefix = this->entry_id_ | ((1 << DataPack::FLAGS_TYPE_BIT) << 8);
  write_int16_to_file (this->file, prefix);
  this->pixel_data_.export_data (this->file);
}

void
DataPack::export_header (void)
{
  write_int16_to_file (this->file, static_cast<uint16_t> (this->num_entries));
}
